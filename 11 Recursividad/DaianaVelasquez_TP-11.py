## 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n 
# para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que 
# indique el usuario.

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Solicitar n√∫mero al usuario
limite = int(input("Ingres√° un n√∫mero para calcular los factoriales desde 1 hasta ese n√∫mero: "))

print("\nFactoriales:")
for i in range(1, limite + 1):
    print(f"{i}! = {factorial(i)}")


## ////////////////////////////////////////////////////////////////

##2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique. 

def fibonacci(pos):
    if pos == 0:
        return 0
    elif pos == 1:
        return 1
    else:
        return fibonacci(pos - 1) + fibonacci(pos - 2)

# Solicitar n√∫mero al usuario
hasta = int(input("\n¬øHasta qu√© posici√≥n quer√©s mostrar la serie de Fibonacci?: "))

print("\nSerie de Fibonacci:")
for i in range(hasta + 1):
    print(f"Posici√≥n {i}: {fibonacci(i)}")


##//////////////////////////////////////////////////////////////

## 3)	Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base 
# elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). 
# Prueba esta funci√≥n en un algoritmo general. 

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Solicitar base y exponente al usuario
base = int(input("\nIngres√° la base: "))
exponente = int(input("Ingres√° el exponente: "))

resultado = potencia(base, exponente)
print(f"\n{base}^{exponente} = {resultado}")

##//////////////////////////////////////////////////////////////

## 4)	Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo 
# en base decimal y devuelva su representaci√≥n en binario como una cadena de texto. 
#Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) 
# y unos (1), en base 2. Para convertir un n√∫mero decimal a binario, 
# se puede seguir este procedimiento: 
#1.	Dividir el n√∫mero por 2. 
#2.	Guardar el resto (0 o 1). 
#3.	Repetir el proceso con el cociente hasta que llegue a 0. 
#4.	Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario. 

#Convertir el n√∫mero 10 a binario: 
#10 √∑ 2 = 5     resto: 0   
# 5 √∑ 2 = 2     resto: 1   
# 2 √∑ 2 = 1     resto: 0   
# 1 √∑ 2 = 0     resto: 1   
# Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010". 

def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitar n√∫mero al usuario
numero = int(input("Ingres√° un n√∫mero entero positivo para convertir a binario: "))

if numero == 0:
    print("El binario de 0 es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"El binario de {numero} es: {binario}")


##/////////////////////////////////////////////////////////////////

##5)	Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que 
# reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un 
# pal√≠ndromo o False si no lo es. 
# Requisitos: 
#La soluci√≥n debe ser recursiva. 
#No se debe usar [::-1] ni la funci√≥n reversed(). 

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

# Solicitar palabra al usuario
texto = input("Ingres√° una palabra sin espacios ni tildes para verificar si es un pal√≠ndromo: ").lower()

if es_palindromo(texto):
    print(f"'{texto}' es un pal√≠ndromo.")
else:
    print(f"'{texto}' no es un pal√≠ndromo.")

    
##////////////////////////////////////////////////////////////////

##6)	Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que 
# reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
#  Restricciones: 
#No se puede convertir el n√∫mero a string. 
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
#Ejemplos: suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) suma_digitos(9)      ‚Üí 9 
#suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) 

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Solicitar n√∫mero al usuario
numero = int(input("Ingres√° un n√∫mero entero positivo para sumar sus d√≠gitos: "))

if numero < 0:
    print("Por favor ingres√° un n√∫mero positivo.")
else:
    resultado = suma_digitos(numero)
    print(f"La suma de los d√≠gitos de {numero} es: {resultado}")

##///////////////////////////////////////////////////////////////////////////

##7)	Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo
#  coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente 
# hasta llegar al √∫ltimo nivel con un solo bloque. 
 
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques
# en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir 
# toda la pir√°mide. 

#  Ejemplos: 
#contar_bloques(1)   ‚Üí 1         (1)
# contar_bloques(2)   ‚Üí 3         (2 + 1)
# contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1) 


def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

nivel_inferior = int(input("Ingres√° el n√∫mero de bloques en el nivel m√°s bajo de la pir√°mide: "))

if nivel_inferior < 1:
    print("El n√∫mero debe ser mayor o igual a 1.")
else:
    total = contar_bloques(nivel_inferior)
    print(f"Para construir la pir√°mide se necesitan {total} bloques en total.")

##////////////////////////////////////////////////////////////////////

##8)	Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que }
# reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva
# cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero. 
#  Ejemplos: 
# contar_digito(12233421, 2)   ‚Üí 3   
# contar_digito(5555, 5)       ‚Üí 4   
# contar_digito(123456, 7)     ‚Üí 0   


def contar_digito(numero, digito):
    if numero == 0:
        return 0
    elif numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

# Pedir los datos al usuario
numero = int(input("Ingres√° un n√∫mero entero positivo: "))
digito = int(input("Ingres√° el d√≠gito que quer√©s contar (entre 0 y 9): "))

# Validaci√≥n b√°sica
if numero < 0 or digito < 0 or digito > 9:
    print("Datos inv√°lidos. Asegurate de que el n√∫mero sea positivo y el d√≠gito est√© entre 0 y 9.")
else:
    resultado = contar_digito(numero, digito)
    print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}.")
